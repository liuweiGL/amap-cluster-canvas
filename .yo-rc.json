{
  "amap-cluster-canvas": {
    "configuration": {
      "config": {
        "topScope": [
          "const webpack = require('webpack')",
          "const path = require('path')",
          "\n",
          "/*\n * We've enabled MiniCssExtractPlugin for you. This allows your app to\n * use css modules that will be moved into a separate CSS file instead of inside\n * one of your module entries!\n *\n * https://github.com/webpack-contrib/mini-css-extract-plugin\n *\n */",
          "const MiniCssExtractPlugin = require('mini-css-extract-plugin');",
          "\n",
          "/*\n * SplitChunksPlugin is enabled by default and replaced\n * deprecated CommonsChunkPlugin. It automatically identifies modules which\n * should be splitted of chunk by heuristics using module duplication count and\n * module category (i. e. node_modules). And splits the chunksâ€¦\n *\n * It is safe to remove \"splitChunks\" from the generated configuration\n * and was added as an educational example.\n *\n * https://webpack.js.org/plugins/split-chunks-plugin/\n *\n */"
        ],
        "webpackOptions": {
          "module": {
            "rules": [
              {
                "include": [
                  "path.resolve(__dirname, 'src')"
                ],
                "loader": "'babel-loader'",
                "options": {
                  "plugins": [
                    "'syntax-dynamic-import'"
                  ],
                  "presets": [
                    [
                      "'env'",
                      {
                        "'modules'": false
                      }
                    ]
                  ]
                },
                "test": "/\\.js$/"
              },
              {
                "test": "/\\.css$/",
                "use": [
                  {
                    "loader": "MiniCssExtractPlugin.loader"
                  },
                  {
                    "loader": "'css-loader'",
                    "options": {
                      "sourceMap": true
                    }
                  }
                ]
              }
            ]
          },
          "entry": "",
          "mode": "'production'",
          "plugins": [
            "new MiniCssExtractPlugin({ filename:'style.css' })"
          ],
          "optimization": {
            "splitChunks": {
              "cacheGroups": {
                "vendors": {
                  "priority": -10,
                  "test": "/[\\\\/]node_modules[\\\\/]/"
                }
              },
              "chunks": "'async'",
              "minChunks": 1,
              "minSize": 30000,
              "name": false
            }
          }
        },
        "configName": "prod"
      }
    }
  }
}