{"version":3,"file":"amap-cluster-canvas.esm.js","sources":["../src/clusterItem.js","../src/utils.js","../src/cluster.js"],"sourcesContent":[" class ClusterItem {\r\n  constructor(point, options) {\r\n    this.coordinate = point.coordinate\r\n    this.points = [point]\r\n    this.options = options\r\n  }\r\n  getCount() {\r\n    return this.points.length\r\n  }\r\n  // 更新聚合点的中心点\r\n  updateCenter() {\r\n    const { points, points: { length }, coordinate: { x: centerX, y: centerY }, options: { isAverageCenter } } = this\r\n    if (isAverageCenter) {\r\n      const newAddPoint = points[length - 1]\r\n      const { coordinate: { x: pointX, y: pointY } } = newAddPoint\r\n      const totalX = centerX * (length - 1)\r\n      const totalY = centerY * (length - 1)\r\n      const newCenterX = (totalX + pointX) / length\r\n      const newCenterY = (totalY + pointY) / length\r\n      this.coordinate = {\r\n        x: newCenterX,\r\n        y: newCenterY\r\n      }\r\n    }\r\n  }\r\n  // 往聚合中添加点\r\n  addPoint(point) {\r\n    this.points.push(point)\r\n    this.updateCenter()\r\n  }\r\n  // 判断一个点是否在改聚合范围内\r\n  contains(point) {\r\n    const { coordinate: { x: pointX, y: pointY } } = point\r\n    const { coordinate: { x: centerX, y: centerY }, options: { gridSize } } = this\r\n    return pointX >= centerX - gridSize &&\r\n    pointX <= centerX + gridSize &&\r\n    pointY >= centerY - gridSize &&\r\n    pointY <= centerY + gridSize\r\n  }\r\n}\r\n\r\nexport default ClusterItem","//经纬度转墨卡托\r\nexport function lonLat2Mercator(lonLat) {\r\n  const [longitude, latitude] = lonLat\r\n  let x = (longitude * 20037508.34) / 180\r\n  let y =\r\n    Math.log(Math.tan(((90 + latitude) * Math.PI) / 360)) / (Math.PI / 180)\r\n  y = (y * 20037508.34) / 180\r\n  return {\r\n    x,\r\n    y\r\n  }\r\n}\r\n//墨卡托转经纬度\r\nexport function mercator2LonLat(pixel) {\r\n  const { x, y } = pixel\r\n  let longitude = (x / 20037508.34) * 180\r\n  let latitude = (y / 20037508.34) * 180\r\n  latitude =\r\n    (180 / Math.PI) *\r\n    (2 * Math.atan(Math.exp((latitude * Math.PI) / 180)) - Math.PI / 2)\r\n\r\n  return [longitude, latitude]\r\n}\r\n","import ClusterItem from './clusterItem'\r\nimport { lonLat2Mercator, mercator2LonLat } from './utils'\r\n\r\n// 开发环境输出日志\r\nconst debug = process.env.NODE_ENV === 'development'\r\n\r\n// 聚合策略\r\nexport const ClusterTypes = {\r\n  ZOOM: 'zoom', // 根据缩放层级聚合\r\n  PIXEL: 'pixel' // 根据相对于地图容器的坐标聚合\r\n}\r\n\r\n// 默认的点样式\r\nconst defaultStyle = {\r\n  width: 60,\r\n  height: 69\r\n}\r\n// 聚合默认设置\r\nconst defaultOptions = {\r\n  type: ClusterTypes.PIXEL, // 聚合策略\r\n  maxZoom: 18, // 最大的聚合级别，大于该级别就不进行相应的聚合\r\n  gridSize: 60, // 聚合计算时，网格的像素大小\r\n  minClusterSize: 2, // 聚合的最小数量，小于该数量个点则不能成为一个聚合\r\n  averageCenter: true, // 是否取所有点的平均值作为聚合点中心\r\n  zoomOnClick: true, // 点击聚合点时，是否展开聚合\r\n  zIndex: 120, // canvas图层的zindex\r\n  visible: true, // 是否显示\r\n  getPosition(item) {\r\n    // 获取经纬度信息\r\n    const { location } = item\r\n    return location ? [location.longitude, location.latitude] : null\r\n  },\r\n  render: null, // 绘制函数\r\n  hoverRender: null, // hover状态下的绘制函数\r\n  // 以下参数主要用于事件系统\r\n  clickHandler: null, // click事件\r\n  mouseoutHandler: null, // mouseout事件\r\n  mouseoverHandler: null, // mouseover事件\r\n  mousemoveHandler: null, // mousemove事件\r\n  normalPointStyle: defaultStyle, // 实体点的样式\r\n  clusterPointStyle: defaultStyle, // 聚合点的样式\r\n  hoverNormalPointStyle: defaultStyle, // hover状态下实体点的样式\r\n  hoverClusterPointStyle: defaultStyle // hover状态下聚合点的样式\r\n}\r\n\r\nclass Cluster {\r\n  constructor(options) {\r\n    const { map, data } = options\r\n    this.options = Object.assign({}, defaultOptions, options)\r\n    this.points = [] // 聚合点+实体点 = 渲染点\r\n    this.buildFn = null // 聚合构建器\r\n    this.pixelFn = null // 还原点坐标到相对地图容器的坐标\r\n    this.lastPixel = {} // 触发事件的坐标\r\n    this.oldHoverPoint = null // 触发事件的对象\r\n    this.renderTimer = null\r\n    this.clusterItems = null\r\n    this.renderEngine = new Canvas({\r\n      map,\r\n      zIndex: this.options.zIndex,\r\n      visible: this.options.visible\r\n    })\r\n    this._init(data)\r\n    this._customEngine()\r\n    this._bindEvent()\r\n  }\r\n  renderLater(delay) {\r\n    if (!this.renderTimer) {\r\n      this.renderTimer = setTimeout(this.render.bind(this), delay || 50)\r\n    }\r\n  }\r\n  render() {\r\n    const {\r\n      points,\r\n      options: { render, normalPointStyle, clusterPointStyle },\r\n      renderEngine: { pixelRatio, clusterCanvasCxt }\r\n    } = this\r\n    if (this.renderTimer) {\r\n      clearTimeout(this.renderTimer)\r\n      this.renderTimer = null\r\n    }\r\n    if (debug) {\r\n      console.time('绘制时间：')\r\n    }\r\n    // 清理画布\r\n    this.renderEngine.clearCluster()\r\n    // 绘制\r\n    points.forEach((point,index) => {\r\n      const pixel = this.pixelFn(point.coordinate)\r\n      const { x, y } = pixel\r\n      const isCluster = this._isCluster(point)\r\n      const style = isCluster ? clusterPointStyle : normalPointStyle\r\n      const { width, height } = style\r\n      // 定位到中心位置\r\n      render(\r\n        clusterCanvasCxt,\r\n        (x - width / 2) * pixelRatio,\r\n        (y - height / 2) * pixelRatio,\r\n        width,\r\n        height,\r\n        {\r\n          index,\r\n          isCluster,\r\n          data: point\r\n        },\r\n        points\r\n      )\r\n    })\r\n    if (debug) {\r\n      console.timeEnd('绘制时间：')\r\n    }\r\n  }\r\n  setData(data) {\r\n    this.data = data\r\n    this._buildCluster()\r\n    this.render()\r\n  }\r\n  _init(data) {\r\n    // 根据聚合策略使用不同的聚合构建器\r\n    this._createBuildFn()\r\n    // 把聚合坐标还原为相对于地图容器的坐标\r\n    this._createPixelFn()\r\n    this.setData(data)\r\n  }\r\n  _createBuildFn() {\r\n    const {\r\n      options: { map, type, gridSize, averageCenter, getPosition }\r\n    } = this\r\n    if (type === ClusterTypes.PIXEL) {\r\n      this.buildFn = () => {\r\n        const bounds = map.getBounds()\r\n        const options = {\r\n          gridSize,\r\n          averageCenter\r\n        }\r\n        this.data.forEach((item) => {\r\n          const location = getPosition(item)\r\n          if (location && bounds.contains(location)) {\r\n            // 经纬度转换为相对于地图容器的坐标\r\n            item.coordinate = map.lngLatToContainer(location)\r\n            this._buildClusterItem(item, options)\r\n          }\r\n        })\r\n      }\r\n    } else {\r\n      this.buildFn = () => {\r\n        const zoom = map.getZoom()\r\n        const bounds = this._getExtendedBounds()\r\n        const options = {\r\n          averageCenter,\r\n          gridSize: gridSize * Math.pow(2, 18 - zoom)\r\n        }\r\n        this.data.forEach((item) => {\r\n          const location = getPosition(item)\r\n          // 反转经纬度的时候使用\r\n          if (location) {\r\n            // 经纬度转换为墨卡托坐标\r\n            if (!item.coordinate) {\r\n              item.coordinate = lonLat2Mercator(location)\r\n            }\r\n            if (this._pointInScreen(bounds, item.coordinate)) {\r\n              this._buildClusterItem(item, options)\r\n            }\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n  _createPixelFn() {\r\n    const {\r\n      options: { type, map }\r\n    } = this\r\n    if (type === ClusterTypes.PIXEL) {\r\n      this.pixelFn = (coordinate) => coordinate\r\n    } else {\r\n      this.pixelFn = (coordinate) => {\r\n        // 墨卡托坐标=>经纬度\r\n        const lnglat = mercator2LonLat(coordinate)\r\n        // 经纬度=>相对地图容器的坐标\r\n        return map.lngLatToContainer(lnglat)\r\n      }\r\n    }\r\n  }\r\n  _buildCluster() {\r\n    if (debug) {\r\n      console.time('聚合构建时间：')\r\n    }\r\n    this.clusterItems = []\r\n    if (this.data) {\r\n      this.buildFn()\r\n      this._updatePoints()\r\n      this.render()\r\n    }\r\n    if (debug) {\r\n      console.timeEnd('聚合构建时间：')\r\n      console.log('%c构建聚合模块数量：' + this.points.length, 'color: red')\r\n    }\r\n  }\r\n  _buildClusterItem(point, options) {\r\n    let parent = null\r\n    let distance = -1 // 当前点与聚合中心的距离\r\n    const {\r\n      coordinate: { x: pointX, y: pointY }\r\n    } = point\r\n    this.clusterItems.forEach((clusterItem) => {\r\n      if (clusterItem.contains(point)) {\r\n        const {\r\n          coordinate: { x: centerX, y: centerY }\r\n        } = clusterItem\r\n        const currDistance =\r\n          Math.pow(pointX - centerX, 2) + Math.pow(pointY - centerY, 2)\r\n        if (distance < 0 || distance > currDistance) {\r\n          // 取距离最近的一个聚合\r\n          parent = clusterItem\r\n          distance = currDistance\r\n        }\r\n      }\r\n    })\r\n    if (parent) {\r\n      // 该点找到聚合对象\r\n      parent.addPoint(point)\r\n    } else {\r\n      // 以该点为中心创建一个聚合对象\r\n      const clusterItem = new ClusterItem(point, options)\r\n      this.clusterItems.push(clusterItem)\r\n    }\r\n  }\r\n  _updatePoints() {\r\n    const {\r\n      clusterItems,\r\n      options: { map, minClusterSize, maxZoom }\r\n    } = this\r\n    if (map.getZoom() >= maxZoom) {\r\n      // 地图放大最大层级，就不存在聚合点了\r\n      this.points = clusterItems.reduce(\r\n        (pre, curr) => pre.concat(curr.points),\r\n        []\r\n      )\r\n    } else {\r\n      // 返回的点数据应该是聚合点+实体点\r\n      let points = []\r\n      clusterItems.forEach((clusterItem) => {\r\n        if (clusterItem.getCount() >= minClusterSize) {\r\n          // 聚合点\r\n          points.push(clusterItem)\r\n        } else {\r\n          // 实体点\r\n          points = points.concat(clusterItem.points)\r\n        }\r\n      })\r\n      this.points = points\r\n    }\r\n  }\r\n  _customEngine() {\r\n    // 重要：当图层发生变动时，自动调用render函数\r\n    this.renderEngine.layer.render = this._buildCluster.bind(this)\r\n  }\r\n  _bindEvent() {\r\n    const {\r\n      options: { map }\r\n    } = this\r\n    // 更新视图\r\n    // map.on('moveend', this._buildCluster.bind(this))\r\n    // map.on('zoomchange', this._buildCluster.bind(this))\r\n    // 实现canvas事件\r\n    map.on('click', this._clickHandler.bind(this)) // => point click 事件\r\n    map.on('mousemove', this._mousemoveHandler.bind(this)) // => point hover 事件\r\n  }\r\n  _clickHandler(event) {\r\n    const { pixel } = event\r\n    const point = this._findEventPoint(pixel)\r\n    if (point) {\r\n      const {\r\n        options: { zoomOnClick, clickHandler }\r\n      } = this\r\n      const params = {\r\n        data: point,\r\n        isCluster: this._isCluster(point)\r\n      }\r\n      // 触发 `mouseout`\r\n      this.mouseoutHandler()\r\n      // 点击聚合点展开聚合\r\n      zoomOnClick && this._zoomOnClickHandler(params)\r\n      this._isFunction(clickHandler) && clickHandler(params)\r\n    }\r\n  }\r\n  // 由`mousemove`衍生出 `mouseout` & `mouseover`\r\n  _mousemoveHandler(event) {\r\n    const { pixel } = event\r\n    const { lastPixel, oldHoverPoint } = this\r\n    if (lastPixel.x === pixel.x && lastPixel.y === pixel.y) {\r\n      return\r\n    }\r\n    const point = this._findEventPoint(pixel)\r\n    if (point === oldHoverPoint) {\r\n      return\r\n    }\r\n    this.mouseoutHandler(point)\r\n    this.mouseoverHandler(point)\r\n    this.lastPixel = pixel\r\n  }\r\n  mouseoutHandler(point) {\r\n    const {\r\n      oldHoverPoint,\r\n      options: { mouseoutHandler }\r\n    } = this\r\n    if (oldHoverPoint) {\r\n      this._clearHoverPoint()\r\n      this._isFunction(mouseoutHandler) &&\r\n        mouseoutHandler({\r\n          data: oldHoverPoint,\r\n          isCluster: this._isCluster(oldHoverPoint)\r\n        })\r\n    }\r\n    this.oldHoverPoint = point\r\n  }\r\n  mouseoverHandler(point) {\r\n    if (!point) {\r\n      return\r\n    }\r\n    const {\r\n      options: { mouseoverHandler }\r\n    } = this\r\n    const params = {\r\n      data: point,\r\n      isCluster: this._isCluster(point)\r\n    }\r\n    this._drawHoverPoint(params)\r\n    this._isFunction(mouseoverHandler) && mouseoverHandler(params)\r\n  }\r\n  _zoomOnClickHandler(data) {\r\n    const {\r\n      isCluster,\r\n      data: { coordinate }\r\n    } = data\r\n    if (isCluster) {\r\n      const {\r\n        options: { map },\r\n        pixelFn\r\n      } = this\r\n      const pixel = pixelFn(coordinate)\r\n      const lnglat = map.containerToLngLat(pixel)\r\n      map.setCenter(lnglat)\r\n      map.zoomIn()\r\n    }\r\n  }\r\n  _drawHoverPoint(params) {\r\n    const {\r\n      options: { hoverRender, normalPointStyle, clusterPointStyle },\r\n      renderEngine,\r\n      renderEngine: { hoverCanvas, hoverCanvasCtx }\r\n    } = this\r\n    if (this._isFunction(hoverRender)) {\r\n      const margin = 20\r\n      const {\r\n        isCluster,\r\n        data: {\r\n          coordinate: { x, y }\r\n        }\r\n      } = params\r\n      const style = isCluster ? clusterPointStyle : normalPointStyle\r\n      const { width, height } = style\r\n      const canvasWidth = width + margin\r\n      const canvasHeight = height + margin\r\n      const canvasLeft = x - canvasWidth / 2\r\n      const canvasTop = y - canvasHeight / 2\r\n      const pixelRatio = renderEngine.getPixelRatio()\r\n      hoverCanvas.style.left = canvasLeft + 'px'\r\n      hoverCanvas.style.top = canvasTop + 'px'\r\n      hoverCanvas.style.cursor = 'pointer'\r\n      renderEngine.setCanvasSize(hoverCanvas, canvasWidth, canvasHeight)\r\n      hoverCanvasCtx.save()\r\n      hoverCanvasCtx.translate(\r\n        -canvasLeft * pixelRatio,\r\n        -canvasTop * pixelRatio\r\n      )\r\n      hoverRender(\r\n        hoverCanvasCtx,\r\n        canvasLeft + margin / 2,\r\n        canvasTop + margin / 2,\r\n        width,\r\n        height,\r\n        params\r\n      )\r\n      hoverCanvasCtx.restore()\r\n    }\r\n  }\r\n  _clearHoverPoint() {\r\n    const {\r\n      renderEngine,\r\n      renderEngine: { hoverCanvas }\r\n    } = this\r\n    renderEngine.setCanvasSize(hoverCanvas, 0, 0)\r\n  }\r\n  _findEventPoint(mousePoint) {\r\n    // 查找鼠标下面的点，因为聚合点跟实体点的大小可能不一致，所以要分开查找\r\n    const {\r\n      points,\r\n      _constains,\r\n      options: { normalPointStyle, clusterPointStyle }\r\n    } = this\r\n    const _clusterPoints = []\r\n    const _normalPoints = []\r\n    points.forEach((item) => {\r\n      if (this._isCluster(item)) {\r\n        _clusterPoints.push(item)\r\n      } else {\r\n        _normalPoints.push(item)\r\n      }\r\n    })\r\n    for (let i = 0, len1 = _clusterPoints.length; i < len1; i++) {\r\n      const item = _clusterPoints[i]\r\n      if (_constains(item.coordinate, mousePoint, clusterPointStyle)) {\r\n        return item\r\n      }\r\n    }\r\n    for (let k = 0, len2 = _normalPoints.length; k < len2; k++) {\r\n      const item = _normalPoints[k]\r\n      if (_constains(item.coordinate, mousePoint, normalPointStyle)) {\r\n        return item\r\n      }\r\n    }\r\n    return null\r\n  }\r\n  _constains(p1, p2, style) {\r\n    // 绘画的时候是以 `p1` 作为中心点\r\n    const { width, height } = style\r\n    const { x: x1, y: y1 } = p1\r\n    const { x: x2, y: y2 } = p2\r\n    return (\r\n      x2 >= x1 - width / 2 &&\r\n      x2 <= x1 + width / 2 &&\r\n      y2 >= y1 - height / 2 &&\r\n      y2 <= y1 + height / 2\r\n    )\r\n  }\r\n  _getExtendedBounds() {\r\n    const {\r\n      options: { map, gridSize }\r\n    } = this\r\n    const zoom = map.getZoom()\r\n    const bounds = map.getBounds()\r\n    const southWest = bounds.getSouthWest()\r\n    const northEast = bounds.getNorthEast()\r\n    // 上右\r\n    const tr = lonLat2Mercator([southWest.lng, southWest.lat])\r\n    // 下左\r\n    const bl = lonLat2Mercator([northEast.lng, northEast.lat])\r\n    const _gridSize = gridSize * Math.pow(2, 18 - zoom)\r\n    tr.x -= _gridSize\r\n    tr.y -= _gridSize\r\n    bl.x += _gridSize\r\n    bl.y += _gridSize\r\n    return [tr, bl]\r\n  }\r\n  _pointInScreen(bounds, coordinate) {\r\n    const [tr, bl] = bounds\r\n    const { x, y } = coordinate\r\n    return bl.x <= 0 || (x >= tr.x && x <= bl.x && y >= tr.y && y <= bl.y)\r\n  }\r\n  _isFunction(fn) {\r\n    return typeof fn === 'function'\r\n  }\r\n  _isCluster(point) {\r\n    return point instanceof ClusterItem\r\n  }\r\n}\r\n\r\nexport default Cluster\r\n"],"names":["ClusterItem","point","options","coordinate","points","this","length","centerX","x","centerY","y","isAverageCenter","newCenterX","newCenterY","push","updateCenter","pointX","pointY","gridSize","lonLat2Mercator","lonLat","longitude","latitude","Math","log","tan","PI","mercator2LonLat","pixel","atan","exp","ClusterTypes","defaultStyle","defaultOptions","PIXEL","item","location","Cluster","map","data","Object","assign","buildFn","pixelFn","lastPixel","oldHoverPoint","renderTimer","clusterItems","renderEngine","Canvas","zIndex","visible","_init","_customEngine","_bindEvent","delay","setTimeout","render","bind","normalPointStyle","clusterPointStyle","pixelRatio","clusterCanvasCxt","clearCluster","forEach","index","_this","isCluster","_isCluster","style","width","height","_buildCluster","_createBuildFn","_createPixelFn","setData","type","averageCenter","getPosition","bounds","getBounds","contains","lngLatToContainer","_buildClusterItem","zoom","getZoom","_this2","_getExtendedBounds","pow","_pointInScreen","lnglat","_updatePoints","parent","distance","clusterItem","currDistance","addPoint","minClusterSize","maxZoom","reduce","pre","curr","concat","getCount","layer","on","_clickHandler","_mousemoveHandler","event","_findEventPoint","zoomOnClick","clickHandler","params","mouseoutHandler","_zoomOnClickHandler","_isFunction","mouseoverHandler","_clearHoverPoint","_drawHoverPoint","containerToLngLat","setCenter","zoomIn","hoverRender","hoverCanvas","hoverCanvasCtx","canvasWidth","canvasHeight","canvasLeft","canvasTop","getPixelRatio","left","top","cursor","setCanvasSize","save","translate","margin","restore","mousePoint","_constains","_clusterPoints","_normalPoints","_this3","i","len1","k","len2","p1","p2","x1","y1","x2","y2","southWest","getSouthWest","northEast","getNorthEast","tr","lng","lat","bl","_gridSize","fn"],"mappings":"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"}