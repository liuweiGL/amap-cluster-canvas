{"version":3,"file":"amap-cluster-canvas.umd.js","sources":["../src/clusterItem.js","../src/utils.js","../src/cluster.js"],"sourcesContent":[" class ClusterItem {\r\n  constructor(point, options) {\r\n    this.coordinate = point.coordinate\r\n    this.points = [point]\r\n    this.options = options\r\n  }\r\n  getCount() {\r\n    return this.points.length\r\n  }\r\n  // 更新聚合点的中心点\r\n  updateCenter() {\r\n    const { points, points: { length }, coordinate: { x: centerX, y: centerY }, options: { isAverageCenter } } = this\r\n    if (isAverageCenter) {\r\n      const newAddPoint = points[length - 1]\r\n      const { coordinate: { x: pointX, y: pointY } } = newAddPoint\r\n      const totalX = centerX * (length - 1)\r\n      const totalY = centerY * (length - 1)\r\n      const newCenterX = (totalX + pointX) / length\r\n      const newCenterY = (totalY + pointY) / length\r\n      this.coordinate = {\r\n        x: newCenterX,\r\n        y: newCenterY\r\n      }\r\n    }\r\n  }\r\n  // 往聚合中添加点\r\n  addPoint(point) {\r\n    this.points.push(point)\r\n    this.updateCenter()\r\n  }\r\n  // 判断一个点是否在改聚合范围内\r\n  contains(point) {\r\n    const { coordinate: { x: pointX, y: pointY } } = point\r\n    const { coordinate: { x: centerX, y: centerY }, options: { gridSize } } = this\r\n    return pointX >= centerX - gridSize &&\r\n    pointX <= centerX + gridSize &&\r\n    pointY >= centerY - gridSize &&\r\n    pointY <= centerY + gridSize\r\n  }\r\n}\r\n\r\nexport default ClusterItem","//经纬度转墨卡托\r\nexport function lonLat2Mercator(lonLat) {\r\n  const [longitude, latitude] = lonLat\r\n  let x = (longitude * 20037508.34) / 180\r\n  let y =\r\n    Math.log(Math.tan(((90 + latitude) * Math.PI) / 360)) / (Math.PI / 180)\r\n  y = (y * 20037508.34) / 180\r\n  return {\r\n    x,\r\n    y\r\n  }\r\n}\r\n//墨卡托转经纬度\r\nexport function mercator2LonLat(pixel) {\r\n  const { x, y } = pixel\r\n  let longitude = (x / 20037508.34) * 180\r\n  let latitude = (y / 20037508.34) * 180\r\n  latitude =\r\n    (180 / Math.PI) *\r\n    (2 * Math.atan(Math.exp((latitude * Math.PI) / 180)) - Math.PI / 2)\r\n\r\n  return [longitude, latitude]\r\n}\r\n","import ClusterItem from './clusterItem'\r\nimport { lonLat2Mercator, mercator2LonLat } from './utils'\r\n\r\n// 开发环境输出日志\r\nconst debug = process.env.NODE_ENV === 'development'\r\n\r\n// 聚合策略\r\nexport const ClusterTypes = {\r\n  ZOOM: 'zoom', // 根据缩放层级聚合\r\n  PIXEL: 'pixel' // 根据相对于地图容器的坐标聚合\r\n}\r\n\r\n// 默认的点样式\r\nconst defaultStyle = {\r\n  width: 60,\r\n  height: 69\r\n}\r\n// 聚合默认设置\r\nconst defaultOptions = {\r\n  type: ClusterTypes.PIXEL, // 聚合策略\r\n  maxZoom: 18, // 最大的聚合级别，大于该级别就不进行相应的聚合\r\n  gridSize: 60, // 聚合计算时，网格的像素大小\r\n  minClusterSize: 2, // 聚合的最小数量，小于该数量个点则不能成为一个聚合\r\n  averageCenter: true, // 是否取所有点的平均值作为聚合点中心\r\n  zoomOnClick: true, // 点击聚合点时，是否展开聚合\r\n  zIndex: 120, // canvas图层的zindex\r\n  visible: true, // 是否显示\r\n  getPosition(item) {\r\n    // 获取经纬度信息\r\n    const { location } = item\r\n    return location ? [location.longitude, location.latitude] : null\r\n  },\r\n  render: null, // 绘制函数\r\n  hoverRender: null, // hover状态下的绘制函数\r\n  // 以下参数主要用于事件系统\r\n  clickHandler: null, // click事件\r\n  mouseoutHandler: null, // mouseout事件\r\n  mouseoverHandler: null, // mouseover事件\r\n  mousemoveHandler: null, // mousemove事件\r\n  normalPointStyle: defaultStyle, // 实体点的样式\r\n  clusterPointStyle: defaultStyle, // 聚合点的样式\r\n  hoverNormalPointStyle: defaultStyle, // hover状态下实体点的样式\r\n  hoverClusterPointStyle: defaultStyle // hover状态下聚合点的样式\r\n}\r\n\r\nclass Cluster {\r\n  constructor(options) {\r\n    const { map, data } = options\r\n    this.options = Object.assign({}, defaultOptions, options)\r\n    this.points = [] // 聚合点+实体点 = 渲染点\r\n    this.buildFn = null // 聚合构建器\r\n    this.pixelFn = null // 还原点坐标到相对地图容器的坐标\r\n    this.lastPixel = {} // 触发事件的坐标\r\n    this.oldHoverPoint = null // 触发事件的对象\r\n    this.renderTimer = null\r\n    this.clusterItems = null\r\n    this.renderEngine = new Canvas({\r\n      map,\r\n      zIndex: this.options.zIndex,\r\n      visible: this.options.visible\r\n    })\r\n    this._init(data)\r\n    this._customEngine()\r\n    this._bindEvent()\r\n  }\r\n  renderLater(delay) {\r\n    if (!this.renderTimer) {\r\n      this.renderTimer = setTimeout(this.render.bind(this), delay || 50)\r\n    }\r\n  }\r\n  render() {\r\n    const {\r\n      points,\r\n      options: { render, normalPointStyle, clusterPointStyle },\r\n      renderEngine: { pixelRatio, clusterCanvasCxt }\r\n    } = this\r\n    if (this.renderTimer) {\r\n      clearTimeout(this.renderTimer)\r\n      this.renderTimer = null\r\n    }\r\n    if (debug) {\r\n      console.time('绘制时间：')\r\n    }\r\n    // 清理画布\r\n    this.renderEngine.clearCluster()\r\n    // 绘制\r\n    points.forEach((point,index) => {\r\n      const pixel = this.pixelFn(point.coordinate)\r\n      const { x, y } = pixel\r\n      const isCluster = this._isCluster(point)\r\n      const style = isCluster ? clusterPointStyle : normalPointStyle\r\n      const { width, height } = style\r\n      // 定位到中心位置\r\n      render(\r\n        clusterCanvasCxt,\r\n        (x - width / 2) * pixelRatio,\r\n        (y - height / 2) * pixelRatio,\r\n        width,\r\n        height,\r\n        {\r\n          index,\r\n          isCluster,\r\n          data: point\r\n        },\r\n        points\r\n      )\r\n    })\r\n    if (debug) {\r\n      console.timeEnd('绘制时间：')\r\n    }\r\n  }\r\n  setData(data) {\r\n    this.data = data\r\n    this._buildCluster()\r\n    this.render()\r\n  }\r\n  _init(data) {\r\n    // 根据聚合策略使用不同的聚合构建器\r\n    this._createBuildFn()\r\n    // 把聚合坐标还原为相对于地图容器的坐标\r\n    this._createPixelFn()\r\n    this.setData(data)\r\n  }\r\n  _createBuildFn() {\r\n    const {\r\n      options: { map, type, gridSize, averageCenter, getPosition }\r\n    } = this\r\n    if (type === ClusterTypes.PIXEL) {\r\n      this.buildFn = () => {\r\n        const bounds = map.getBounds()\r\n        const options = {\r\n          gridSize,\r\n          averageCenter\r\n        }\r\n        this.data.forEach((item) => {\r\n          const location = getPosition(item)\r\n          if (location && bounds.contains(location)) {\r\n            // 经纬度转换为相对于地图容器的坐标\r\n            item.coordinate = map.lngLatToContainer(location)\r\n            this._buildClusterItem(item, options)\r\n          }\r\n        })\r\n      }\r\n    } else {\r\n      this.buildFn = () => {\r\n        const zoom = map.getZoom()\r\n        const bounds = this._getExtendedBounds()\r\n        const options = {\r\n          averageCenter,\r\n          gridSize: gridSize * Math.pow(2, 18 - zoom)\r\n        }\r\n        this.data.forEach((item) => {\r\n          const location = getPosition(item)\r\n          // 反转经纬度的时候使用\r\n          if (location) {\r\n            // 经纬度转换为墨卡托坐标\r\n            if (!item.coordinate) {\r\n              item.coordinate = lonLat2Mercator(location)\r\n            }\r\n            if (this._pointInScreen(bounds, item.coordinate)) {\r\n              this._buildClusterItem(item, options)\r\n            }\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n  _createPixelFn() {\r\n    const {\r\n      options: { type, map }\r\n    } = this\r\n    if (type === ClusterTypes.PIXEL) {\r\n      this.pixelFn = (coordinate) => coordinate\r\n    } else {\r\n      this.pixelFn = (coordinate) => {\r\n        // 墨卡托坐标=>经纬度\r\n        const lnglat = mercator2LonLat(coordinate)\r\n        // 经纬度=>相对地图容器的坐标\r\n        return map.lngLatToContainer(lnglat)\r\n      }\r\n    }\r\n  }\r\n  _buildCluster() {\r\n    if (debug) {\r\n      console.time('聚合构建时间：')\r\n    }\r\n    this.clusterItems = []\r\n    if (this.data) {\r\n      this.buildFn()\r\n      this._updatePoints()\r\n      this.render()\r\n    }\r\n    if (debug) {\r\n      console.timeEnd('聚合构建时间：')\r\n      console.log('%c构建聚合模块数量：' + this.points.length, 'color: red')\r\n    }\r\n  }\r\n  _buildClusterItem(point, options) {\r\n    let parent = null\r\n    let distance = -1 // 当前点与聚合中心的距离\r\n    const {\r\n      coordinate: { x: pointX, y: pointY }\r\n    } = point\r\n    this.clusterItems.forEach((clusterItem) => {\r\n      if (clusterItem.contains(point)) {\r\n        const {\r\n          coordinate: { x: centerX, y: centerY }\r\n        } = clusterItem\r\n        const currDistance =\r\n          Math.pow(pointX - centerX, 2) + Math.pow(pointY - centerY, 2)\r\n        if (distance < 0 || distance > currDistance) {\r\n          // 取距离最近的一个聚合\r\n          parent = clusterItem\r\n          distance = currDistance\r\n        }\r\n      }\r\n    })\r\n    if (parent) {\r\n      // 该点找到聚合对象\r\n      parent.addPoint(point)\r\n    } else {\r\n      // 以该点为中心创建一个聚合对象\r\n      const clusterItem = new ClusterItem(point, options)\r\n      this.clusterItems.push(clusterItem)\r\n    }\r\n  }\r\n  _updatePoints() {\r\n    const {\r\n      clusterItems,\r\n      options: { map, minClusterSize, maxZoom }\r\n    } = this\r\n    if (map.getZoom() >= maxZoom) {\r\n      // 地图放大最大层级，就不存在聚合点了\r\n      this.points = clusterItems.reduce(\r\n        (pre, curr) => pre.concat(curr.points),\r\n        []\r\n      )\r\n    } else {\r\n      // 返回的点数据应该是聚合点+实体点\r\n      let points = []\r\n      clusterItems.forEach((clusterItem) => {\r\n        if (clusterItem.getCount() >= minClusterSize) {\r\n          // 聚合点\r\n          points.push(clusterItem)\r\n        } else {\r\n          // 实体点\r\n          points = points.concat(clusterItem.points)\r\n        }\r\n      })\r\n      this.points = points\r\n    }\r\n  }\r\n  _customEngine() {\r\n    // 重要：当图层发生变动时，自动调用render函数\r\n    this.renderEngine.layer.render = this._buildCluster.bind(this)\r\n  }\r\n  _bindEvent() {\r\n    const {\r\n      options: { map }\r\n    } = this\r\n    // 更新视图\r\n    // map.on('moveend', this._buildCluster.bind(this))\r\n    // map.on('zoomchange', this._buildCluster.bind(this))\r\n    // 实现canvas事件\r\n    map.on('click', this._clickHandler.bind(this)) // => point click 事件\r\n    map.on('mousemove', this._mousemoveHandler.bind(this)) // => point hover 事件\r\n  }\r\n  _clickHandler(event) {\r\n    const { pixel } = event\r\n    const point = this._findEventPoint(pixel)\r\n    if (point) {\r\n      const {\r\n        options: { zoomOnClick, clickHandler }\r\n      } = this\r\n      const params = {\r\n        data: point,\r\n        isCluster: this._isCluster(point)\r\n      }\r\n      // 触发 `mouseout`\r\n      this.mouseoutHandler()\r\n      // 点击聚合点展开聚合\r\n      zoomOnClick && this._zoomOnClickHandler(params)\r\n      this._isFunction(clickHandler) && clickHandler(params)\r\n    }\r\n  }\r\n  // 由`mousemove`衍生出 `mouseout` & `mouseover`\r\n  _mousemoveHandler(event) {\r\n    const { pixel } = event\r\n    const { lastPixel, oldHoverPoint } = this\r\n    if (lastPixel.x === pixel.x && lastPixel.y === pixel.y) {\r\n      return\r\n    }\r\n    const point = this._findEventPoint(pixel)\r\n    if (point === oldHoverPoint) {\r\n      return\r\n    }\r\n    this.mouseoutHandler(point)\r\n    this.mouseoverHandler(point)\r\n    this.lastPixel = pixel\r\n  }\r\n  mouseoutHandler(point) {\r\n    const {\r\n      oldHoverPoint,\r\n      options: { mouseoutHandler }\r\n    } = this\r\n    if (oldHoverPoint) {\r\n      this._clearHoverPoint()\r\n      this._isFunction(mouseoutHandler) &&\r\n        mouseoutHandler({\r\n          data: oldHoverPoint,\r\n          isCluster: this._isCluster(oldHoverPoint)\r\n        })\r\n    }\r\n    this.oldHoverPoint = point\r\n  }\r\n  mouseoverHandler(point) {\r\n    if (!point) {\r\n      return\r\n    }\r\n    const {\r\n      options: { mouseoverHandler }\r\n    } = this\r\n    const params = {\r\n      data: point,\r\n      isCluster: this._isCluster(point)\r\n    }\r\n    this._drawHoverPoint(params)\r\n    this._isFunction(mouseoverHandler) && mouseoverHandler(params)\r\n  }\r\n  _zoomOnClickHandler(data) {\r\n    const {\r\n      isCluster,\r\n      data: { coordinate }\r\n    } = data\r\n    if (isCluster) {\r\n      const {\r\n        options: { map },\r\n        pixelFn\r\n      } = this\r\n      const pixel = pixelFn(coordinate)\r\n      const lnglat = map.containerToLngLat(pixel)\r\n      map.setCenter(lnglat)\r\n      map.zoomIn()\r\n    }\r\n  }\r\n  _drawHoverPoint(params) {\r\n    const {\r\n      options: { hoverRender, normalPointStyle, clusterPointStyle },\r\n      renderEngine,\r\n      renderEngine: { hoverCanvas, hoverCanvasCtx }\r\n    } = this\r\n    if (this._isFunction(hoverRender)) {\r\n      const margin = 20\r\n      const {\r\n        isCluster,\r\n        data: {\r\n          coordinate: { x, y }\r\n        }\r\n      } = params\r\n      const style = isCluster ? clusterPointStyle : normalPointStyle\r\n      const { width, height } = style\r\n      const canvasWidth = width + margin\r\n      const canvasHeight = height + margin\r\n      const canvasLeft = x - canvasWidth / 2\r\n      const canvasTop = y - canvasHeight / 2\r\n      const pixelRatio = renderEngine.getPixelRatio()\r\n      hoverCanvas.style.left = canvasLeft + 'px'\r\n      hoverCanvas.style.top = canvasTop + 'px'\r\n      hoverCanvas.style.cursor = 'pointer'\r\n      renderEngine.setCanvasSize(hoverCanvas, canvasWidth, canvasHeight)\r\n      hoverCanvasCtx.save()\r\n      hoverCanvasCtx.translate(\r\n        -canvasLeft * pixelRatio,\r\n        -canvasTop * pixelRatio\r\n      )\r\n      hoverRender(\r\n        hoverCanvasCtx,\r\n        canvasLeft + margin / 2,\r\n        canvasTop + margin / 2,\r\n        width,\r\n        height,\r\n        params\r\n      )\r\n      hoverCanvasCtx.restore()\r\n    }\r\n  }\r\n  _clearHoverPoint() {\r\n    const {\r\n      renderEngine,\r\n      renderEngine: { hoverCanvas }\r\n    } = this\r\n    renderEngine.setCanvasSize(hoverCanvas, 0, 0)\r\n  }\r\n  _findEventPoint(mousePoint) {\r\n    // 查找鼠标下面的点，因为聚合点跟实体点的大小可能不一致，所以要分开查找\r\n    const {\r\n      points,\r\n      _constains,\r\n      options: { normalPointStyle, clusterPointStyle }\r\n    } = this\r\n    const _clusterPoints = []\r\n    const _normalPoints = []\r\n    points.forEach((item) => {\r\n      if (this._isCluster(item)) {\r\n        _clusterPoints.push(item)\r\n      } else {\r\n        _normalPoints.push(item)\r\n      }\r\n    })\r\n    for (let i = 0, len1 = _clusterPoints.length; i < len1; i++) {\r\n      const item = _clusterPoints[i]\r\n      if (_constains(item.coordinate, mousePoint, clusterPointStyle)) {\r\n        return item\r\n      }\r\n    }\r\n    for (let k = 0, len2 = _normalPoints.length; k < len2; k++) {\r\n      const item = _normalPoints[k]\r\n      if (_constains(item.coordinate, mousePoint, normalPointStyle)) {\r\n        return item\r\n      }\r\n    }\r\n    return null\r\n  }\r\n  _constains(p1, p2, style) {\r\n    // 绘画的时候是以 `p1` 作为中心点\r\n    const { width, height } = style\r\n    const { x: x1, y: y1 } = p1\r\n    const { x: x2, y: y2 } = p2\r\n    return (\r\n      x2 >= x1 - width / 2 &&\r\n      x2 <= x1 + width / 2 &&\r\n      y2 >= y1 - height / 2 &&\r\n      y2 <= y1 + height / 2\r\n    )\r\n  }\r\n  _getExtendedBounds() {\r\n    const {\r\n      options: { map, gridSize }\r\n    } = this\r\n    const zoom = map.getZoom()\r\n    const bounds = map.getBounds()\r\n    const southWest = bounds.getSouthWest()\r\n    const northEast = bounds.getNorthEast()\r\n    // 上右\r\n    const tr = lonLat2Mercator([southWest.lng, southWest.lat])\r\n    // 下左\r\n    const bl = lonLat2Mercator([northEast.lng, northEast.lat])\r\n    const _gridSize = gridSize * Math.pow(2, 18 - zoom)\r\n    tr.x -= _gridSize\r\n    tr.y -= _gridSize\r\n    bl.x += _gridSize\r\n    bl.y += _gridSize\r\n    return [tr, bl]\r\n  }\r\n  _pointInScreen(bounds, coordinate) {\r\n    const [tr, bl] = bounds\r\n    const { x, y } = coordinate\r\n    return bl.x <= 0 || (x >= tr.x && x <= bl.x && y >= tr.y && y <= bl.y)\r\n  }\r\n  _isFunction(fn) {\r\n    return typeof fn === 'function'\r\n  }\r\n  _isCluster(point) {\r\n    return point instanceof ClusterItem\r\n  }\r\n}\r\n\r\nexport default Cluster\r\n"],"names":["ClusterItem","point","options","coordinate","points","this","length","centerX","x","centerY","y","isAverageCenter","newCenterX","newCenterY","push","updateCenter","pointX","pointY","gridSize","lonLat2Mercator","lonLat","longitude","latitude","Math","log","tan","PI","ClusterTypes","defaultStyle","defaultOptions","PIXEL","item","location","Cluster","map","data","Object","assign","buildFn","pixelFn","lastPixel","oldHoverPoint","renderTimer","clusterItems","renderEngine","Canvas","zIndex","visible","_init","_customEngine","_bindEvent","delay","setTimeout","render","bind","normalPointStyle","clusterPointStyle","pixelRatio","clusterCanvasCxt","clearCluster","forEach","index","pixel","_this","isCluster","_isCluster","style","width","height","_buildCluster","_createBuildFn","_createPixelFn","setData","type","averageCenter","getPosition","bounds","getBounds","contains","lngLatToContainer","_buildClusterItem","zoom","getZoom","_this2","_getExtendedBounds","pow","_pointInScreen","lnglat","atan","exp","_updatePoints","parent","distance","clusterItem","currDistance","addPoint","minClusterSize","maxZoom","reduce","pre","curr","concat","getCount","layer","on","_clickHandler","_mousemoveHandler","event","_findEventPoint","zoomOnClick","clickHandler","params","mouseoutHandler","_zoomOnClickHandler","_isFunction","mouseoverHandler","_clearHoverPoint","_drawHoverPoint","containerToLngLat","setCenter","zoomIn","hoverRender","hoverCanvas","hoverCanvasCtx","canvasWidth","canvasHeight","canvasLeft","canvasTop","getPixelRatio","left","top","cursor","setCanvasSize","save","translate","margin","restore","mousePoint","_constains","_clusterPoints","_normalPoints","_this3","i","len1","k","len2","p1","p2","x1","y1","x2","y2","southWest","getSouthWest","northEast","getNorthEast","tr","lng","lat","bl","_gridSize","fn"],"mappings":"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"}