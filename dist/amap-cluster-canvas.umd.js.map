{"version":3,"file":"amap-cluster-canvas.umd.js","sources":["../src/canvas.js","../src/clusterItem.js","../src/pixel.coordinate.js","../src/utils.js","../src/zoom.coordinate.js","../src/event.js","../src/cluster.js"],"sourcesContent":["/**\r\n * 为点聚合提供画布\r\n * @param options\r\n * {\r\n *   map: 地图,\r\n *   zIndex: 图层zIndex,\r\n *   visible: 是否可见\r\n * }\r\n */\r\nclass Canvas {\r\n  constructor( options ) {\r\n    this.layer = null\r\n    this.hoverCanvas = null\r\n    this.hoverCanvasCtx = null\r\n    this.clusterCanvas = null\r\n    this.clusterCanvasCxt = null\r\n    this.options = options\r\n    this.pixelRatio = this.getPixelRatio()\r\n    this.init()\r\n  }\r\n  init() {\r\n    const {\r\n      options: { map, visible, zIndex, render }\r\n    } = this\r\n    const container = document.createElement( 'div' )\r\n    // 绘制聚合点\r\n    const clusterCanvas = document.createElement( 'canvas' )\r\n    clusterCanvas.style.position = 'absolute'\r\n    // hover状态下的点绘制\r\n    const hoverCanvas = document.createElement( 'canvas' )\r\n    hoverCanvas.style.position = 'absolute'\r\n    container.appendChild( clusterCanvas )\r\n    container.appendChild( hoverCanvas )\r\n    this.clusterCanvas = clusterCanvas\r\n    this.hoverCanvas = hoverCanvas\r\n    this.clusterCanvasCxt = clusterCanvas.getContext( '2d' )\r\n    this.hoverCanvasCtx = hoverCanvas.getContext( '2d' )\r\n\r\n    this.layer = new AMap.CustomLayer( container, {\r\n      map,\r\n      zIndex,\r\n      visible,\r\n      zooms: [1, 20]\r\n    } )\r\n    this.layer.render = render\r\n  }\r\n  // 设备像素比\r\n  getPixelRatio() {\r\n    return Math.min( 2, Math.round( window.devicePixelRatio || 1 ) )\r\n  }\r\n  // 设置canvas的width&height属性可以清理画布\r\n  setCanvasSize( canvas, w, h ) {\r\n    const { pixelRatio } = this\r\n    canvas.width = w * pixelRatio\r\n    canvas.height = h * pixelRatio\r\n    canvas.style.width = w + 'px'\r\n    canvas.style.height = h + 'px'\r\n  }\r\n}\r\n\r\nexport default Canvas\r\n","class ClusterItem {\r\n  constructor( point, options ) {\r\n    this.coordinate = point.coordinate\r\n    this.points = [point]\r\n    this.options = options\r\n  }\r\n  getCount() {\r\n    return this.points.length\r\n  }\r\n  // 更新聚合点的中心点\r\n  updateCenter() {\r\n    const {\r\n      points,\r\n      points: { length },\r\n      coordinate: { x: centerX, y: centerY },\r\n      options: { averageCenter }\r\n    } = this\r\n    if ( averageCenter ) {\r\n      const newAddPoint = points[length - 1]\r\n      const {\r\n        coordinate: { x: pointX, y: pointY }\r\n      } = newAddPoint\r\n      const totalX = centerX * ( length - 1 )\r\n      const totalY = centerY * ( length - 1 )\r\n      const newCenterX = ( totalX + pointX ) / length\r\n      const newCenterY = ( totalY + pointY ) / length\r\n      this.coordinate = {\r\n        x: newCenterX,\r\n        y: newCenterY\r\n      }\r\n    }\r\n  }\r\n  // 往聚合中添加点\r\n  addPoint( point ) {\r\n    this.points.push( point )\r\n    this.updateCenter()\r\n  }\r\n  // 判断一个点是否在改聚合范围内\r\n  contains( point ) {\r\n    const {\r\n      coordinate: { x: pointX, y: pointY }\r\n    } = point\r\n    const {\r\n      coordinate: { x: centerX, y: centerY },\r\n      options: { gridSize }\r\n    } = this\r\n    return (\r\n      pointX >= centerX - gridSize &&\r\n      pointX <= centerX + gridSize &&\r\n      pointY >= centerY - gridSize &&\r\n      pointY <= centerY + gridSize\r\n    )\r\n  }\r\n}\r\n\r\nexport default ClusterItem\r\n","export default class PixelCoordinate {\r\n  constructor( options ) {\r\n    this.map = options.map\r\n    this.gridSize = options.gridSize\r\n  }\r\n  getGrideSize() {\r\n    return this.gridSize\r\n  }\r\n  getRenderData( data ) {\r\n    const bounds = this.map.getBounds()\r\n    return data\r\n      .filter( item => bounds.contains( item.position ) )\r\n      .map( item => {\r\n        // 经纬度转换为相对于地图容器的坐标\r\n        const coordinate = this.map.lngLatToContainer( item.position )\r\n        const renderPixel = this.coordinateToPixel( item )\r\n        return {\r\n          ...item,\r\n          coordinate,\r\n          renderPixel\r\n        }\r\n      } )\r\n  }\r\n  coordinateToPixel( point ) {\r\n    return point.coordinate\r\n  }\r\n}\r\n","//经纬度转墨卡托\r\nexport function lonLat2Mercator(lonLat) {\r\n  const [longitude, latitude] = lonLat\r\n  let x = (longitude * 20037508.34) / 180\r\n  let y =\r\n    Math.log(Math.tan(((90 + latitude) * Math.PI) / 360)) / (Math.PI / 180)\r\n  y = (y * 20037508.34) / 180\r\n  return {\r\n    x,\r\n    y\r\n  }\r\n}\r\n//墨卡托转经纬度\r\nexport function mercator2LonLat(pixel) {\r\n  const { x, y } = pixel\r\n  let longitude = (x / 20037508.34) * 180\r\n  let latitude = (y / 20037508.34) * 180\r\n  latitude =\r\n    (180 / Math.PI) *\r\n    (2 * Math.atan(Math.exp((latitude * Math.PI) / 180)) - Math.PI / 2)\r\n\r\n  return [longitude, latitude]\r\n}\r\n","import { lonLat2Mercator, mercator2LonLat } from './utils'\r\n\r\nexport default class ZoomCoordinate {\r\n  constructor( options ) {\r\n    this.map = options.map\r\n    this.gridSize = options.gridSize\r\n  }\r\n  getGridSize() {\r\n    return this.gridSize * Math.pow( 2, 18 - this.map.getZoom() )\r\n  }\r\n  getRenderData( data ) {\r\n    const bounds = this.getExtendedBounds()\r\n    return data\r\n      .filter( item => !item.coordinate )\r\n      .map( item => {\r\n        const coordinate = lonLat2Mercator( item.position )\r\n        return this.contains( bounds, coordinate )\r\n          ? {\r\n            ...item,\r\n            coordinate,\r\n            renderPixel: this.coordinateToPixel( item )\r\n          }\r\n          : null\r\n      } )\r\n      .filter( item => !!item )\r\n  }\r\n  getExtendedBounds() {\r\n    const gridSize = this.getGridSize()\r\n    const bounds = this.map.getBounds()\r\n    const southWest = bounds.getSouthWest()\r\n    const northEast = bounds.getNorthEast()\r\n    // 上右\r\n    const tr = lonLat2Mercator( [southWest.lng, southWest.lat] )\r\n    // 下左\r\n    const bl = lonLat2Mercator( [northEast.lng, northEast.lat] )\r\n    tr.x -= gridSize\r\n    tr.y -= gridSize\r\n    bl.x += gridSize\r\n    bl.y += gridSize\r\n    return [tr, bl]\r\n  }\r\n  coordinateToPixel( point ) {\r\n    return this.map.lngLatToContainer(\r\n      point.position || mercator2LonLat( point.coordinate )\r\n    )\r\n  }\r\n  contains( bounds, coordinate ) {\r\n    const [tr, bl] = bounds\r\n    const { x, y } = coordinate\r\n    // 小于等于0 ：地图缩放到最小，世界地图都在视图内\r\n    return bl.x <= 0 || ( x >= tr.x && x <= bl.x && y >= tr.y && y <= bl.y )\r\n  }\r\n}\r\n","export default class Event {\r\n  constructor( cluster ) {\r\n    this.hoverPoint = null\r\n    this.zooming = false\r\n    this.cluster = cluster\r\n    this.map = cluster.options.map\r\n    this.customContains = cluster.options.customContains\r\n    this.click = cluster.options.clickHandler\r\n    this.mouseout = cluster.options.mouseoutHandler\r\n    this.mouseover = cluster.options.mouseoverHandler\r\n    this.mousemove = cluster.options.mousemoveHandler\r\n    this.zoomOnClick = cluster.options.zoomOnClick\r\n    this.normalPointStyle = cluster.options.normalPointStyle\r\n    this.clusterPointStyle = cluster.options.clusterPointStyle\r\n    this.hoverNormalPointStyle = cluster.options.hoverNormalPointStyle\r\n    this.hoverClusterPointStyle = cluster.options.hoverClusterPointStyle\r\n    this.initEvent()\r\n  }\r\n  initEvent() {\r\n    this.map.on( 'click', this.clickHandler.bind( this ) )\r\n    this.map.on( 'mousemove', this.mousemoveHandler.bind( this ) )\r\n    this.map.on( 'zoomstart', this.zoomstartHandler.bind( this ) )\r\n    this.map.on( 'zoomend', this.zoomendHandler.bind( this ) )\r\n  }\r\n  clickHandler( event ) {\r\n    const { pixel } = event\r\n    const point = this.findPoint( pixel )\r\n    if ( point ) {\r\n      const isCluster = this.cluster.isCluster( point )\r\n      const params = {\r\n        isCluster,\r\n        data: point\r\n      }\r\n      // 触发 `mouseout`\r\n      this.mouseoutHandler( point )\r\n      // 点击聚合点展开聚合\r\n      this.zoomOnClick && isCluster && this.zoomOnClickHandler( point )\r\n      this.cluster.isFunction( this.click ) && this.click( params )\r\n    }\r\n  }\r\n  // 由`mousemove`衍生出 `mouseout` & `mouseover`\r\n  mousemoveHandler( event ) {\r\n    const { pixel } = event\r\n    let point = this.hoverPoint\r\n\r\n    if ( !( !this.zooming && point && this.constains( point, pixel ) ) ) {\r\n      point = this.findPoint( pixel )\r\n      this.mouseoutHandler( point )\r\n      this.mouseoverHandler( point )\r\n    }\r\n    this.cluster.isFunction( this.mousemove ) && this.mousemove( event, point )\r\n  }\r\n  mouseoutHandler( point ) {\r\n    if ( this.hoverPoint ) {\r\n      this.cluster.clearHoverPoint()\r\n      this.cluster.isFunction( this.mouseout ) &&\r\n        this.mouseout( this.cluster.getParams( this.hoverPoint ) )\r\n    }\r\n    this.hoverPoint = point\r\n  }\r\n  mouseoverHandler( point ) {\r\n    if ( point ) {\r\n      const params = this.cluster.getParams( point )\r\n      this.cluster.renderHoverPoint( params )\r\n      this.cluster.isFunction( this.mouseover ) && this.mouseover( params )\r\n    }\r\n  }\r\n  zoomstartHandler() {\r\n    this.zooming = true\r\n    this.cluster.clearHoverPoint()\r\n  }\r\n  zoomendHandler() {\r\n    this.zooming = false\r\n    this.hoverPoint = null\r\n    this.cluster.clearHoverPoint()\r\n  }\r\n  zoomOnClickHandler( point ) {\r\n    const lnglat = this.map.containerToLngLat( point.renderPixel )\r\n    this.map.setCenter( lnglat )\r\n    this.map.zoomIn()\r\n  }\r\n  // 查找鼠标下面的点，因为聚合点跟实体点的大小可能不一致，所以要分开查找\r\n  findPoint( eventPixel ) {\r\n    const data = this.cluster.getPoints()\r\n    const { length } = data\r\n    for ( let i = 0; i < length; i++ ) {\r\n      const point = data[i]\r\n      if ( this.constains( point, eventPixel ) ) {\r\n        return point\r\n      }\r\n    }\r\n    return null\r\n  }\r\n  // pixel 坐标是否在 point 范围内\r\n  constains( point, pixel ) {\r\n    const style = this.cluster.isCluster( point )\r\n      ? this.clusterPointStyle\r\n      : this.normalPointStyle\r\n    if ( this.cluster.isFunction( this.customContains ) ) {\r\n      return this.customContains( point.renderPixel, pixel, style )\r\n    }\r\n    const { width, height } = style\r\n    const {\r\n      renderPixel: { x: x1, y: y1 }\r\n    } = point\r\n    const { x: x2, y: y2 } = pixel\r\n    return x2 >= x1 && x2 <= x1 + width && y2 >= y1 && y2 <= y1 + height\r\n  }\r\n}\r\n","import Canvas from './canvas'\r\nimport ClusterItem from './clusterItem'\r\nimport PixelCoordinate from './pixel.coordinate'\r\nimport ZoomCoordinate from './zoom.coordinate'\r\nimport Event from './event'\r\n\r\n// 开发环境输出日志\r\nconst debug = process.env.NODE_ENV === 'development'\r\n\r\n// 聚合策略\r\nexport const ClusterTypes = {\r\n  MERCATOR: 'zoom', // 根据缩放层级聚合\r\n  PIXEL: 'pixel' // 根据相对于地图容器的坐标聚合\r\n}\r\n\r\n// 默认的点样式\r\nconst defaultStyle = {\r\n  width: 60,\r\n  height: 69\r\n}\r\n// 聚合默认设置\r\nconst defaultOptions = {\r\n  type: ClusterTypes.PIXEL, // 聚合策略\r\n  maxZoom: 18, // 最大的聚合级别，大于该级别就不进行相应的聚合\r\n  gridSize: 60, // 聚合计算时，网格的像素大小\r\n  minClusterSize: 2, // 聚合的最小数量，小于该数量个点则不能成为一个聚合\r\n  averageCenter: true, // 是否取所有点的平均值作为聚合点中心\r\n  zoomOnClick: true, // 点击聚合点时，是否展开聚合\r\n  zIndex: 120, // canvas图层的zindex\r\n  visible: true, // 是否显示\r\n  getPosition( item ) {\r\n    // 获取经纬度信息\r\n    const { location } = item\r\n    return location ? [location.longitude, location.latitude] : null\r\n  },\r\n  render: null, // 绘制函数\r\n  hoverRender: null, // hover状态下的绘制函数\r\n  // 以下参数主要用于事件系统\r\n  clickHandler: null, // click事件\r\n  mouseoutHandler: null, // mouseout事件\r\n  mouseoverHandler: null, // mouseover事件\r\n  mousemoveHandler: null, // mousemove事件\r\n  normalPointStyle: defaultStyle, // 实体点的样式\r\n  clusterPointStyle: defaultStyle, // 聚合点的样式\r\n  hoverNormalPointStyle: defaultStyle, // hover状态下实体点的样式\r\n  hoverClusterPointStyle: defaultStyle // hover状态下聚合点的样式\r\n}\r\n\r\nexport default class Cluster {\r\n  constructor( options ) {\r\n    this.data = null\r\n    this.renderData = null\r\n    this.points = null\r\n    this.clusterItems = null\r\n    this.options = Object.assign( {}, defaultOptions, options )\r\n    this.options.data = null\r\n    this.eventEngine = new Event( this )\r\n    this.renderEngine = new Canvas( {\r\n      map: this.options.map,\r\n      zIndex: this.options.zIndex,\r\n      visible: this.options.visible,\r\n      render: this.build.bind( this )\r\n    } )\r\n    this.coordinateEngine =\r\n      options.type === ClusterTypes.PIXEL\r\n        ? new PixelCoordinate( this.options )\r\n        : new ZoomCoordinate( this.options )\r\n    this.setData( options.data )\r\n  }\r\n  setData( data ) {\r\n    const {\r\n      options: { getPosition }\r\n    } = this\r\n    this.data = []\r\n    if ( data ) {\r\n      data.forEach( item => {\r\n        item.position = getPosition( item )\r\n        this.data.push( item )\r\n      } )\r\n    }\r\n    this.build()\r\n  }\r\n  build() {\r\n    if ( debug ) {\r\n      console.time( '聚合构建时间：' )\r\n    }\r\n    this.buildCusterItem()\r\n    this.updatePoints()\r\n    this.renderPoint()\r\n    if ( debug ) {\r\n      console.timeEnd( '聚合构建时间：' )\r\n      console.log( '%c构建聚合模块数量：' + this.points.length, 'color: red' )\r\n    }\r\n  }\r\n  buildCusterItem() {\r\n    const gridSize = this.coordinateEngine.getGridSize()\r\n    const options = {\r\n      gridSize,\r\n      averageCenter: this.options.averageCenter\r\n    }\r\n    this.clusterItems = []\r\n    this.renderData = this.coordinateEngine.getRenderData( this.data )\r\n    this.renderData.forEach( point => {\r\n      let parent = null\r\n      let distance = -1 // 当前点与聚合中心的距离\r\n      const {\r\n        coordinate: { x: pointX, y: pointY }\r\n      } = point\r\n      this.clusterItems.forEach( clusterItem => {\r\n        if ( clusterItem.contains( point ) ) {\r\n          const {\r\n            coordinate: { x: centerX, y: centerY }\r\n          } = clusterItem\r\n          const currDistance =\r\n            Math.pow( pointX - centerX, 2 ) + Math.pow( pointY - centerY, 2 )\r\n          if ( distance < 0 || distance > currDistance ) {\r\n            // 取距离最近的一个聚合\r\n            parent = clusterItem\r\n            distance = currDistance\r\n          }\r\n        }\r\n      } )\r\n      if ( parent ) {\r\n        // 该点找到聚合对象\r\n        parent.addPoint( point )\r\n      } else {\r\n        // 以该点为中心创建一个聚合对象\r\n        const clusterItem = new ClusterItem( point, options )\r\n        clusterItem.renderPixel = this.coordinateEngine.coordinateToPixel(\r\n          clusterItem\r\n        )\r\n        this.clusterItems.push( clusterItem )\r\n      }\r\n    } )\r\n  }\r\n  updatePoints() {\r\n    const {\r\n      clusterItems,\r\n      options: { map, minClusterSize, maxZoom }\r\n    } = this\r\n    if ( map.getZoom() >= maxZoom ) {\r\n      // 地图放大最大层级，就不存在聚合点了\r\n      this.points = clusterItems.reduce(\r\n        ( pre, curr ) => pre.concat( curr.points ),\r\n        []\r\n      )\r\n    } else {\r\n      // 返回的点数据应该是聚合点+实体点\r\n      let points = []\r\n      clusterItems.forEach( clusterItem => {\r\n        if ( clusterItem.getCount() >= minClusterSize ) {\r\n          // 聚合点\r\n          points.push( clusterItem )\r\n        } else {\r\n          // 实体点\r\n          points = points.concat( clusterItem.points )\r\n        }\r\n      } )\r\n      this.points = points\r\n    }\r\n  }\r\n  renderLater( delay ) {\r\n    if ( !this.renderTimer ) {\r\n      this.renderTimer = setTimeout( this.renderPoint.bind( this ), delay || 50 )\r\n    }\r\n  }\r\n  renderPoint() {\r\n    const {\r\n      points,\r\n      options: { render },\r\n      renderEngine: { pixelRatio, clusterCanvasCxt }\r\n    } = this\r\n    if ( !this.isFunction( render ) ) {\r\n      return\r\n    }\r\n    if ( this.renderTimer ) {\r\n      clearTimeout( this.renderTimer )\r\n      this.renderTimer = null\r\n    }\r\n    if ( debug ) {\r\n      console.time( '绘制时间：' )\r\n    }\r\n    // 清理画布\r\n    this.clearCluster()\r\n    // 绘制\r\n    points.forEach( ( point, index ) => {\r\n      const params = this.getParams( point )\r\n      // 定位到中心位置\r\n      render(\r\n        clusterCanvasCxt,\r\n        point.renderPixel.x * pixelRatio,\r\n        point.renderPixel.y * pixelRatio,\r\n        params.style.width,\r\n        params.style.height,\r\n        {\r\n          index,\r\n          data: params.data,\r\n          isCluster: params.isCluster\r\n        },\r\n        points\r\n      )\r\n    } )\r\n    if ( debug ) {\r\n      console.timeEnd( '绘制时间：' )\r\n    }\r\n  }\r\n  renderHoverPoint( params ) {\r\n    if ( this.isFunction( this.options.hoverRender ) ) {\r\n      const {\r\n        isCluster,\r\n        data: {\r\n          renderPixel: { x, y }\r\n        }\r\n      } = params\r\n      const {\r\n        renderEngine,\r\n        renderEngine: { hoverCanvasCtx },\r\n        options: { hoverRender, hoverNormalPointStyle, hoverClusterPointStyle }\r\n      } = this\r\n      const style = isCluster ? hoverClusterPointStyle : hoverNormalPointStyle\r\n      const { width, height } = style\r\n      const pixelRatio = renderEngine.getPixelRatio()\r\n      const canvasLeft = x * pixelRatio\r\n      const canvasTop = y * pixelRatio\r\n      hoverRender( hoverCanvasCtx, canvasLeft, canvasTop, width, height, params )\r\n    }\r\n  }\r\n  // 清除聚合\r\n  clearCluster() {\r\n    const {\r\n      renderEngine,\r\n      renderEngine: { clusterCanvas },\r\n      options: { map }\r\n    } = this\r\n    const { width, height } = map.getSize()\r\n    renderEngine.setCanvasSize( clusterCanvas, width, height )\r\n  }\r\n  // 清除 hover 点\r\n  clearHoverPoint() {\r\n    const {\r\n      renderEngine,\r\n      renderEngine: { hoverCanvas },\r\n      options: { map }\r\n    } = this\r\n    const { width, height } = map.getSize()\r\n    renderEngine.setCanvasSize( hoverCanvas, width, height )\r\n  }\r\n  getPoints() {\r\n    return this.points\r\n  }\r\n  getParams( point ) {\r\n    const isCluster = this.isCluster( point )\r\n    return {\r\n      isCluster,\r\n      data: point,\r\n      style: isCluster\r\n        ? this.options.clusterPointStyle\r\n        : this.options.normalPointStyle\r\n    }\r\n  }\r\n  isCluster( point ) {\r\n    return point instanceof ClusterItem\r\n  }\r\n  isFunction( fn ) {\r\n    return typeof fn === 'function'\r\n  }\r\n}\r\n"],"names":["Canvas","options","layer","hoverCanvas","hoverCanvasCtx","clusterCanvas","clusterCanvasCxt","pixelRatio","this","getPixelRatio","init","map","visible","zIndex","render","container","document","createElement","style","position","appendChild","getContext","AMap","CustomLayer","zooms","Math","min","round","window","devicePixelRatio","canvas","w","h","width","height","ClusterItem","point","coordinate","points","length","centerX","x","centerY","y","averageCenter","newCenterX","newCenterY","push","updateCenter","pointX","pointY","gridSize","PixelCoordinate","data","bounds","getBounds","filter","item","contains","_this","lngLatToContainer","renderPixel","coordinateToPixel","lonLat2Mercator","lonLat","longitude","latitude","log","tan","PI","ZoomCoordinate","pow","getZoom","getExtendedBounds","getGridSize","southWest","getSouthWest","northEast","getNorthEast","tr","lng","lat","bl","pixel","atan","exp","Event","cluster","hoverPoint","zooming","customContains","click","clickHandler","mouseout","mouseoutHandler","mouseover","mouseoverHandler","mousemove","mousemoveHandler","zoomOnClick","normalPointStyle","clusterPointStyle","hoverNormalPointStyle","hoverClusterPointStyle","initEvent","on","bind","zoomstartHandler","zoomendHandler","event","findPoint","isCluster","params","zoomOnClickHandler","isFunction","constains","clearHoverPoint","getParams","renderHoverPoint","lnglat","containerToLngLat","setCenter","zoomIn","eventPixel","getPoints","i","x1","y1","x2","y2","ClusterTypes","MERCATOR","PIXEL","defaultStyle","defaultOptions","type","maxZoom","minClusterSize","getPosition","location","hoverRender","Cluster","renderData","clusterItems","Object","assign","eventEngine","renderEngine","build","coordinateEngine","setData","forEach","buildCusterItem","updatePoints","renderPoint","getRenderData","parent","distance","_this2","clusterItem","currDistance","addPoint","reduce","pre","curr","concat","getCount","delay","renderTimer","setTimeout","clearTimeout","clearCluster","index","_this3","getSize","setCanvasSize","fn"],"mappings":"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"}